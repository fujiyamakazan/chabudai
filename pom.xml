<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>net.nanisl.zabuton</groupId>
  <artifactId>chabudai</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>chabudai</name>
	<build>
		<resources>
			<resource>
				<filtering>false</filtering>
				<directory>src/main/resources</directory>
			</resource>
			<!-- javaと同じパッケージのhtmlなどもリソースに追加 -->
			<resource>
				<filtering>false</filtering>
				<directory>src/main/java</directory>
				<includes>
					<include>**</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<filtering>false</filtering>
				<directory>src/test/resources</directory>
			</testResource>
			<testResource>
				<filtering>false</filtering>
				<directory>src/test/java</directory>
				<includes>
					<include>**</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</testResource>
		</testResources>
		<plugins>
			<!-- 【prepare-package】[unpack-dependencies] Systemスコープも含む依存関係のライブラリを展開してリソースに追加 -->
			<!-- 【install】[copy-dependencies] libraryを出力(jdepの為) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>unpackDependencies</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<configuration>
							<!-- 単体テストの時にclassesフォルダが汚染されていると不都合なので別のフォルダへ -->
							<outputDirectory>${project.build.directory}/dependency-unpack</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>copyDependencies</id>
						<phase>install</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/dependency</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- 【package】MANIFEST.MF作成 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<!-- パッケージされるJarの名前 -->
					<finalName>zabuton-chabudai</finalName>
					<!-- Jar一体化 すでに [unpack-dependencies] で実施されているので不要
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
					-->
					<appendAssemblyId>false</appendAssemblyId><!-- assemblyIdを付与しない -->
					<archive>
						<manifest>
							<!-- エントリポイントとなるクラス名 -->
							<mainClass>${groupId}.${name}.Runner</mainClass>
						</manifest>
					</archive>
                    <descriptors>
                    	<!-- classes のほか dependency-unpack もパッケージする -->
                        <descriptor>assemble.xml</descriptor>
                    </descriptors>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Javaの実行 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>codegeneration</id>
						<phase>install</phase>
						<goals>
							<goal>java</goal>
						</goals>
						<configuration>
							<mainClass>${groupId}.${name}.Deployer</mainClass>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<dependencies>
		<dependency>
			<groupId>net.nanisl.zabuton</groupId>
			<artifactId>zabuton</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
	</dependencies>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.compiler.source>11</maven.compiler.source>
		<maven.compiler.target>11</maven.compiler.target>
	</properties>
</project>